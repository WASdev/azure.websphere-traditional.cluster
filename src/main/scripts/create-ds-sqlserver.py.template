#      Copyright (c) IBM Corporation.
#      Copyright (c) Microsoft Corporation.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
# 
#           http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Get WAS cluster id as the parent ID for creating JDBC provider
cluster = AdminConfig.getid('/ServerCluster:${CLUSTER_NAME}/')

# JDBC Provider
n1 = ['name', 'SQLServerJDBCProvider']
implCN = ['implementationClassName', 'com.microsoft.sqlserver.jdbc.SQLServerConnectionPoolDataSource']
cls = ['classpath', '${SQLSERVER_JDBC_DRIVER_CLASS_PATH}']
provider = ['providerType', 'Microsoft SQL Server JDBC Driver']
jdbcAttrs = [n1,  implCN, cls, provider]
jdbCProvider = AdminConfig.create('JDBCProvider', cluster, jdbcAttrs)

# Define user alias
userAlias = 'wasnd-cluster/sqlserver'

# JASS Auth entry
enablePswlessConnection = ${ENABLE_PASSWORDLESS_CONNECTION}
if not enablePswlessConnection:
    alias = ['alias', userAlias]
    userid = ['userId', '${SQLSERVER_DATABASE_USER_NAME}']
    password = ['password', '${SQLSERVER_DATABASE_USER_PASSWORD}']
    jaasAttrs = [alias, userid, password]
    security = AdminConfig.getid('/Security:/')
    j2cUser = AdminConfig.create('JAASAuthData', security, jaasAttrs)

# Data Source
newjdbc = AdminConfig.getid('/JDBCProvider:SQLServerJDBCProvider/')
dsAttrs = []
dsAttrs.append(['name', '${SQLSERVER_DATASOURCE_NAME}'])
dsAttrs.append(['jndiName', '${SQLSERVER_DATASOURCE_JNDI_NAME}'])
dsAttrs.append(['datasourceHelperClassname', 'com.ibm.websphere.rsadapter.MicrosoftSQLServerDataStoreHelper'])
if not enablePswlessConnection:
    dsAttrs.append(['authDataAlias', userAlias])
    dsAttrs.append(['authMechanismPreference', 'BASIC_PASSWORD'])
newds = AdminConfig.create('DataSource', newjdbc, dsAttrs)

# Data Source properties
propSet = AdminConfig.create('J2EEResourcePropertySet', newds, [])
AdminConfig.create('J2EEResourceProperty', propSet, [["name", "databaseName"], ["value", "${SQLSERVER_DATABASE_NAME}"]])
AdminConfig.create('J2EEResourceProperty', propSet, [["name", "serverName"], ["value", "${SQLSERVER_SERVER_NAME}"]])
AdminConfig.create('J2EEResourceProperty', propSet, [["name", "portNumber"], ["value", "${SQLSERVER_PORT_NUMBER}"]])
if enablePswlessConnection:
    AdminConfig.create('J2EEResourceProperty', propSet, [["name", "authentication"], ["value", "ActiveDirectoryMSI"]])
    AdminConfig.create('J2EEResourceProperty', propSet, [["name", "MSIClientId"], ["value", "${MSI_CLIENT_ID}"]])

# Create CMP Connection factory
rra = AdminConfig.getid("/ServerCluster:${CLUSTER_NAME}/J2CResourceAdapter:WebSphere Relational Resource Adapter/")
cmpAttrs = []
cmpAttrs.append(["name", "SQLServerDataSource_CF"])
cmpAttrs.append(["cmpDatasource", newds])
if not enablePswlessConnection:
    cmpAttrs.append(["authDataAlias", userAlias])
    cmpAttrs.append(["authMechanismPreference", "BASIC_PASSWORD"])
cf = AdminConfig.create("CMPConnectorFactory", rra, cmpAttrs)

# Save configuratoin changes and sync to active nodes
AdminConfig.save()
AdminNodeManagement.syncActiveNodes()
